name: GitHub Classroom Workflow

on: [push]

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  build:
    name: Autograding
    runs-on: ubuntu-latest
    steps:
    - name: Clean up disk space
      run: sudo rm -rf "/opt/ghc" && sudo rm -rf "/usr/local/share/boost" && sudo rm -rf $AGENT_TOOLSDIRECTORY

    - name: Set up OpenJDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.9.5

    - name: Checkout Code
      uses: actions/checkout@v4

    # Run the autograding action (this runs the tests)
    - name: Run Autograding
      id: autograding
      uses: education/autograding@v1
      continue-on-error: true  # Allow workflow to continue even if tests fail

    # Debug step to list files in the workspace and find test reports
    - name: List all files after Autograding
      run: |
        echo "Listing files in the workspace:"
        ls -alh
        echo "Checking for Maven test logs..."
        find . -type f -name "*.txt" -o -name "*.log" -o -name "*.xml"

    # Process test results into JSON
    - name: Convert Test Reports to JSON
      run: |
        chmod +x ./scripts/process_results.sh
        ./scripts/process_results.sh

    # Upload JSON Test Results as an Artifact
    - name: Upload JSON Test Results
      uses: actions/upload-artifact@v4
      with:
        name: json-test-results
        path: test_results.json
        continue-on-error: true  # Ensure workflow continues even if upload fails

    # Step 5: Download the uploaded test results artifact
    - name: Download test results artifact
      uses: actions/download-artifact@v4
      with:
        name: json-test-results
        path: ./artifacts  # This is the directory where the artifact will be downloaded

    # Step 6: Compare the generated JSON with the expected output
    - name: Compare JSON output
      run: |
        chmod +x ./scripts/compare_json.sh  # Ensure the comparison script is executable
        GENERATED_JSON="./artifacts/test_results.json"  # Path to the downloaded JSON
        EXPECTED_JSON="expected_output.json"  # Path to your expected JSON file
        ./scripts/compare_json.sh  # Run the comparison script to compare the generated and expected JSONs
     
     

